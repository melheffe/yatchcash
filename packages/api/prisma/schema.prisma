// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multitenant Architecture
model Tenant {
  id                String   @id @default(cuid())
  name              String   // Company/Organization name
  subdomain         String   @unique // customer1.yachtcash.com
  email             String   // Primary contact email
  phone             String?
  address           String?
  country           String?
  status            TenantStatus @default(ACTIVE)
  subscriptionPlan  String   @default("basic") @map("subscription_plan")
  isOnTrial         Boolean  @default(true) @map("is_trial")
  trialEndsAt       DateTime? @map("trial_ends_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdByUserId   String?  @map("created_by_user_id") // Super admin who created this tenant

  // Relations
  users             User[]
  yachts            Yacht[]
  cashRecipients    CashRecipient[]
  expenseCategories ExpenseCategory[]
  roles             Role[]
  permissions       Permission[]
  alerts            Alert[]
  reports           Report[]
  auditLogs         AuditLog[]

  @@map("tenants")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  TRIAL_EXPIRED
}

// Core Authentication & Users
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String   @map("password_hash")
  status            UserStatus @default(ACTIVE)
  assignedRoles     String[] @map("assigned_roles")
  permissions       String[] // Permission overrides
  lastLogin         DateTime? @map("last_login")
  
  // Multitenancy
  tenantId          String?  @map("tenant_id") // null for super admin users
  isSuperAdmin      Boolean  @default(false) @map("is_super_admin")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdByUserId   String?  @map("created_by_user_id")

  // Relations
  tenant            Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  profile           Profile?
  sessions          Session[]
  ownedYachts       Yacht[] @relation("YachtOwner")
  managedYachts     Yacht[] @relation("YachtManager")
  captainYachts     Yacht[] @relation("YachtCaptain")
  yachtAssignments  YachtUser[]
  createdTransactions Transaction[]
  uploadedReceipts  Receipt[]
  flaggedTransactions TransactionFlag[] @relation("FlaggedBy")
  resolvedFlags     TransactionFlag[] @relation("ResolvedBy")
  alerts            Alert[]
  generatedReports  Report[]
  createdCategories ExpenseCategory[]
  createdRecipients CashRecipient[]
  auditLogs         AuditLog[]
  cashBalanceUpdates CashBalance[]

  @@map("users")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  firstName        String   @map("first_name")
  lastName         String   @map("last_name")
  phone            String?
  emergencyContact String?  @map("emergency_contact")
  address          String?
  country          String?
  preferredLanguage String  @default("en") @map("preferred_language")
  timezone         String   @default("UTC")
  preferences      Json     @default("{}")
  avatarUrl        String?  @map("avatar_url")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// RBAC
model Role {
  id              String   @id @default(cuid())
  name            String
  displayName     String   @map("display_name")
  description     String
  permissions     String[] // Permission IDs
  isSystemRole    Boolean  @default(false) @map("is_system_role")
  isActive        Boolean  @default(true) @map("is_active")
  sortOrder       Int      @default(0) @map("sort_order")
  
  // Multitenancy
  tenantId        String?  @map("tenant_id") // null for system roles
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdByUserId String   @map("created_by_user_id")

  // Relations
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  yachtUsers      YachtUser[]

  @@unique([name, tenantId]) // Unique role names per tenant
  @@map("roles")
}

model Permission {
  id                  String   @id @default(cuid())
  name                String
  displayName         String   @map("display_name")
  description         String
  resource            String
  action              PermissionAction
  isSystemPermission  Boolean  @default(false) @map("is_system_permission")
  isActive            Boolean  @default(true) @map("is_active")
  
  // Multitenancy
  tenantId            String?  @map("tenant_id") // null for system permissions
  
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  createdByUserId     String   @map("created_by_user_id")

  // Relations
  tenant              Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([name, tenantId]) // Unique permission names per tenant
  @@map("permissions")
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}

// Yacht Management
model Yacht {
  id                    String   @id @default(cuid())
  name                  String
  imoNumber             String?  @map("imo_number")
  ownerUserId           String   @map("owner_user_id")
  primaryCaptainUserId  String?  @map("primary_captain_user_id")
  managerUserId         String?  @map("manager_user_id")
  isActive              Boolean  @default(true) @map("is_active")
  
  // Multitenancy
  tenantId              String   @map("tenant_id")
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner                 User     @relation("YachtOwner", fields: [ownerUserId], references: [id])
  manager               User?    @relation("YachtManager", fields: [managerUserId], references: [id])
  primaryCaptain        User?    @relation("YachtCaptain", fields: [primaryCaptainUserId], references: [id])
  yachtUsers            YachtUser[]
  transactions          Transaction[]
  cashBalances          CashBalance[]
  expenseCategories     ExpenseCategory[]
  alerts                Alert[]
  reports               Report[]
  auditLogs             AuditLog[]

  @@map("yachts")
}

model YachtUser {
  id                String   @id @default(cuid())
  yachtId           String   @map("yacht_id")
  userId            String   @map("user_id")
  roleId            String   @map("role_id")
  assignedAt        DateTime @default(now()) @map("assigned_at")
  expiresAt         DateTime? @map("expires_at")
  isActive          Boolean  @default(true) @map("is_active")
  assignedByUserId  String   @map("assigned_by_user_id")

  // Relations
  yacht             Yacht    @relation(fields: [yachtId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role              Role     @relation(fields: [roleId], references: [id])

  @@unique([yachtId, userId])
  @@map("yacht_users")
}

// Financial Models
model CurrencyCode {
  id              String   @id @default(cuid())
  code            String   @unique
  name            String
  symbol          String
  decimalPlaces   Int      @map("decimal_places")
  isActive        Boolean  @default(true) @map("is_active")
  isDefault       Boolean  @default(false) @map("is_default")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdByUserId String   @map("created_by_user_id")

  // Relations
  cashBalances    CashBalance[]
  transactions    Transaction[]
  fromExchangeRates CurrencyExchangeRate[] @relation("FromCurrency")
  toExchangeRates   CurrencyExchangeRate[] @relation("ToCurrency")

  @@map("currency_codes")
}

model CashBalance {
  id              String   @id @default(cuid())
  yachtId         String   @map("yacht_id")
  currencyCodeId  String   @map("currency_code_id")
  amount          Decimal  @db.Decimal(12, 2)
  thresholdAlert  Decimal  @db.Decimal(12, 2) @map("threshold_alert")
  lastUpdated     DateTime @map("last_updated")
  updatedByUserId String   @map("updated_by_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  yacht           Yacht        @relation(fields: [yachtId], references: [id], onDelete: Cascade)
  currencyCode    CurrencyCode @relation(fields: [currencyCodeId], references: [id])
  updatedBy       User         @relation(fields: [updatedByUserId], references: [id])

  @@unique([yachtId, currencyCodeId])
  @@map("cash_balances")
}

model Transaction {
  id                String   @id @default(cuid())
  yachtId           String   @map("yacht_id")
  createdByUserId   String   @map("created_by_user_id")
  recipientId       String?  @map("recipient_id")
  expenseCategoryId String   @map("expense_category_id")
  amount            Decimal  @db.Decimal(12, 2)
  currencyCodeId    String   @map("currency_code_id")
  description       String
  transactionDate   DateTime @map("transaction_date")
  location          String?
  latitude          Decimal? @db.Decimal(10, 8)
  longitude         Decimal? @db.Decimal(11, 8)
  status            TransactionStatus @default(PENDING)
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  yacht             Yacht            @relation(fields: [yachtId], references: [id], onDelete: Cascade)
  createdBy         User             @relation(fields: [createdByUserId], references: [id])
  recipient         CashRecipient?   @relation(fields: [recipientId], references: [id])
  expenseCategory   ExpenseCategory  @relation(fields: [expenseCategoryId], references: [id])
  currencyCode      CurrencyCode     @relation(fields: [currencyCodeId], references: [id])
  receipt           Receipt?
  confirmation      Confirmation?
  flags             TransactionFlag[]

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FLAGGED
  APPROVED
}

model Receipt {
  id              String   @id @default(cuid())
  transactionId   String   @unique @map("transaction_id")
  filePath        String   @map("file_path")
  fileName        String   @map("file_name")
  mimeType        String   @map("mime_type")
  fileSize        Int      @map("file_size")
  uploadedAt      DateTime @default(now()) @map("uploaded_at")
  uploadedByUserId String  @map("uploaded_by_user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  uploadedBy      User        @relation(fields: [uploadedByUserId], references: [id])

  @@map("receipts")
}

model CashRecipient {
  id                String   @id @default(cuid())
  name              String
  company           String?
  phone             String?
  email             String?
  address           String?
  country           String?
  taxId             String?  @map("tax_id")
  isVerified        Boolean  @default(false) @map("is_verified")
  isBlacklisted     Boolean  @default(false) @map("is_blacklisted")
  verificationNotes String?  @map("verification_notes")
  
  // Multitenancy
  tenantId          String   @map("tenant_id")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdByUserId   String   @map("created_by_user_id")

  // Relations
  tenant            Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy         User           @relation(fields: [createdByUserId], references: [id])
  transactions      Transaction[]
  confirmations     Confirmation[]

  @@map("cash_recipients")
}

// Categories
model ExpenseCategory {
  id                String   @id @default(cuid())
  name              String
  description       String?
  yachtId           String?  @map("yacht_id") // null for default categories
  defaultCategoryId String?  @map("default_category_id")
  isDefault         Boolean  @default(false) @map("is_default")
  
  // Multitenancy
  tenantId          String?  @map("tenant_id") // null for global default categories
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdByUserId   String   @map("created_by_user_id")

  // Relations
  tenant            Tenant?        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  yacht             Yacht?         @relation(fields: [yachtId], references: [id], onDelete: Cascade)
  defaultCategory   DefaultExpenseCategory? @relation(fields: [defaultCategoryId], references: [id])
  createdBy         User           @relation(fields: [createdByUserId], references: [id])
  transactions      Transaction[]

  @@unique([name, yachtId, tenantId])
  @@map("expense_categories")
}

model DefaultExpenseCategory {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  icon            String?
  color           String?
  isActive        Boolean  @default(true) @map("is_active")
  sortOrder       Int      @default(0) @map("sort_order")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdByUserId String   @map("created_by_user_id")

  // Relations
  expenseCategories ExpenseCategory[]

  @@map("default_expense_categories")
}

// Workflow & Notifications
model Confirmation {
  id                String   @id @default(cuid())
  transactionId     String   @unique @map("transaction_id")
  recipientId       String   @map("recipient_id")
  method            ConfirmationMethod
  contactInfo       String   @map("contact_info")
  sentAt            DateTime? @map("sent_at")
  confirmedAt       DateTime? @map("confirmed_at")
  confirmationToken String   @map("confirmation_token")
  status            ConfirmationStatus @default(PENDING)
  retryCount        Int      @default(0) @map("retry_count")
  failureReason     String?  @map("failure_reason")

  // Relations
  transaction       Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  recipient         CashRecipient @relation(fields: [recipientId], references: [id])

  @@map("confirmations")
}

enum ConfirmationMethod {
  SMS
  EMAIL
  LINK
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  EXPIRED
  FAILED
}

model TransactionFlag {
  id                String   @id @default(cuid())
  transactionId     String   @map("transaction_id")
  flaggedByUserId   String   @map("flagged_by_user_id")
  flagTypeId        String   @map("flag_type_id")
  reason            String
  resolutionNotes   String?  @map("resolution_notes")
  status            FlagStatus @default(OPEN)
  createdAt         DateTime @default(now()) @map("created_at")
  resolvedAt        DateTime? @map("resolved_at")
  resolvedByUserId  String?  @map("resolved_by_user_id")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  flaggedBy         User        @relation("FlaggedBy", fields: [flaggedByUserId], references: [id])
  resolvedBy        User?       @relation("ResolvedBy", fields: [resolvedByUserId], references: [id])
  flagType          FlagType    @relation(fields: [flagTypeId], references: [id])

  @@map("transaction_flags")
}

enum FlagStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  DISMISSED
}

model FlagType {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String   @map("display_name")
  description     String
  color           String
  requiresApproval Boolean @default(false) @map("requires_approval")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdByUserId String   @map("created_by_user_id")

  // Relations
  flags           TransactionFlag[]

  @@map("flag_types")
}

model Alert {
  id          String   @id @default(cuid())
  yachtId     String?  @map("yacht_id")
  userId      String   @map("user_id")
  alertTypeId String   @map("alert_type_id")
  title       String
  message     String
  metadata    Json     @default("{}")
  priority    AlertPriority
  
  // Multitenancy
  tenantId    String   @map("tenant_id")
  
  createdAt   DateTime @default(now()) @map("created_at")
  readAt      DateTime? @map("read_at")
  isRead      Boolean  @default(false) @map("is_read")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  yacht       Yacht?    @relation(fields: [yachtId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  alertType   AlertType @relation(fields: [alertTypeId], references: [id])

  @@map("alerts")
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model AlertType {
  id              String   @id @default(cuid())
  name            String   @unique
  displayName     String   @map("display_name")
  description     String
  priority        AlertPriority
  isActive        Boolean  @default(true) @map("is_active")
  defaultSettings Json     @default("{}") @map("default_settings")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdByUserId String   @map("created_by_user_id")

  // Relations
  alerts          Alert[]

  @@map("alert_types")
}

// Reports
model Report {
  id                String   @id @default(cuid())
  generatedByUserId String   @map("generated_by_user_id")
  yachtId           String?  @map("yacht_id")
  reportType        ReportType @map("report_type")
  filters           Json     @default("{}")
  filePath          String?  @map("file_path")
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  generatedAt       DateTime @default(now()) @map("generated_at")
  status            ReportStatus @default(GENERATING)
  errorMessage      String?  @map("error_message")
  
  // Multitenancy
  tenantId          String   @map("tenant_id")
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  generatedBy       User     @relation(fields: [generatedByUserId], references: [id])
  yacht             Yacht?   @relation(fields: [yachtId], references: [id], onDelete: Cascade)

  @@map("reports")
}

enum ReportType {
  MONTHLY
  TRIP
  CUSTOM
  RECONCILIATION
  AUDIT
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
}

// Exchange Rates
model CurrencyExchangeRate {
  id             String   @id @default(cuid())
  fromCurrencyId String   @map("from_currency_id")
  toCurrencyId   String   @map("to_currency_id")
  rate           Decimal  @db.Decimal(10, 6)
  rateDate       DateTime @map("rate_date")
  source         String   @default("manual")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  fromCurrency   CurrencyCode @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  toCurrency     CurrencyCode @relation("ToCurrency", fields: [toCurrencyId], references: [id])

  @@unique([fromCurrencyId, toCurrencyId, rateDate])
  @@map("currency_exchange_rates")
}

// Sessions
model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  deviceInfo   String?  @map("device_info")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  isActive     Boolean  @default(true) @map("is_active")

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// System Configuration
model SystemConfiguration {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  description     String
  dataType        ConfigDataType @map("data_type")
  isSensitive     Boolean  @default(false) @map("is_sensitive")
  category        String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  updatedByUserId String   @map("updated_by_user_id")

  @@map("system_configurations")
}

enum ConfigDataType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// Audit Log
model AuditLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  yachtId    String?  @map("yacht_id")
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  action     AuditAction
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address")
  
  // Multitenancy  
  tenantId   String?  @map("tenant_id") // null for super admin actions
  
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  tenant     Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])
  yacht      Yacht?   @relation(fields: [yachtId], references: [id])

  @@map("audit_logs")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
} 